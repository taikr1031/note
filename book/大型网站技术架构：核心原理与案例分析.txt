一.大型网站架构演化
  大数据高并发架构技术点：
    CDN镜像
    负载均衡
    静态化
    静态内容（图片）与动态内容服务器分离
    缓存（本地缓存、集中（集群）缓存）
    数据队列
    数据库集群，读写分离
    库表水平及垂直拆分
    NoSql分布式数据引擎及MapReduce
    虚拟化云计算体系

  大型网站软件系统特点：
    高并发，大流量   高可用   海量数据  用户分布广泛，网络情况复杂   安全环境恶劣  需求快速变更，发布频繁   渐进式发展

  山寨和创新的最大区别不在于是否抄袭，是否模仿，而在于对问题和需求是否真正理解和把握。
  
  大数据计算需求实现方式：
    1.大数据变成小数据->抽样
    2.分布式集群化:将机器学习算法在hadoop分布式集群上并行化，如mahout
    3.降低问题精度
  12306真正的问题不在于他的技术架构，而是业务架构。售票方式从之前的零点开售若干天的票（类似促销秒杀），改为引入排队机制、整点售票改为分时段售票。其实如果能控制住并发访问的量，很多棘手的技术问题就不是问题了。
  技术是用来解决业务问题的，而业务的问题，也可以通过业务手段解决。

二.大型网站架构模式
2.1 网站架构模式
  1.分层：将系统在横向维度切分成几个职责相对单一的部分，通过上层对下层的依赖和调用组成一个完整的系统。如应用层、服务层、数据层。
  2.分割：将系统在纵向维度切分。即将大的业务功能分割成不同的应用，由不同的团队负责。该分割可在多个横向分层里进行。
  3.分布式：大型网站的分层和分割的一个主要目的是为了切分后的模块便于分布式部署，即将不同模块部署在不同服务器上，通过远程调用协同工作。
    优点：可以使用更多的计算机完成同样的功能。
    缺点：多台机器间的服务调用必须依靠网络，对性能会造成影响；分布式中的保持数据一致性和事务较难；网站部署复杂，不易维护。
    分布式方案：
      1.分布式应用和服务：改善性能和并发性、加快开发和发布速度、减少数据库连接消耗。应用可复用。
      2.分布式静态资源：动静分离；静态资源包独立部署减轻应用服务器压力；单独域名，加快浏览速度；利于分工合作。
      3.分布式数据和存储：分布式关系数据库；NoSql都是分布式
      4.分布式计算：应用、服务、实时数据处理都是计算；hadoop mapreduce；移动计算，不移动数据，将计算程序分发到数据所在位置加速计算
      5.分布式配置：支持网站线上服务器配置实时更新
      6.分布式锁：实现并发和协同
      7.分布式文件：支持云存储
  4.集群：多台服务器部署相同的应用构成一个集群，通过负载均衡设备共同对外提供服务。
    优点：提高并发性；提高可用性，如某台服务器故障，可通过失效转移机制转发到其他服务器，不影响用户使用
  5.缓存
    1.CDN：内容分发网络。部署在距离终端用户最近的网络服务商，使用户通过最短访问路径获取数据
    2.反向代理：部署在网站前端。当用户发送请求，最先到的就是反向代理服务器，它缓存静态资源，无需将请求转发到应用服务器就能直接返回用户
    3.本地缓存：在服务器本地缓存热点数据，应用程序直接访问内存，无需访问数据库
    4.分布式缓存：使用前提：1.数据访问热点不均衡；2.数据不会很快过期
    5.异步：生产者消费者模式
      优点：提高系统可用性；加快网站访问速度；消除并发访问高峰；提供系统灵活性，只要数据结构不变，彼此功能实现可随意变化而不互相影响
            降低软件耦合性，业务之间消息传递不是同步，而是将一个业务操作分成多个阶段，每个阶段之间通过共享数据的方式异步执行协作。
      使用场景：异步处理，应用解耦，流量削锋和消息通讯。
      实现方式：单一服务器内通过多线程共享内存队列的方式实现异步；分布式系统多个服务器集群通过分布式消息队列实现异步（mq、kafka）。
  6.冗余：服务器冗余运行、数据冗余备份；数据库除了定期备份、存档保存、实现冷备份外，为了保证在线业务高可用，主从分离，实时同步实现热备份
  7.自动化：无人值守
      程序发布：自动化代码管理、自动化测试、自动化安全检测、自动化部署。
      日常运维：自动化监控、自动化报警、自动化失效转移、自动化失效恢复、自动化降级、自动化资源分配。
  8.安全：密码、手机验证码、加密、网站验证码、敏感信息过滤、攻击网站XSS攻击、SQL注入、风险控制
      
2.2 架构模式在新浪微博的应用
  1.新浪微博采用异步推拉结合模式，用户发表微博后系统将微博写入消息队列后立即返回，用户响应迅速，消息队列消费者任务将微博推送给所有当前在线粉丝的订阅列表中，非在线用户登录后再根据关注列表拉取微博订阅列表。
  2.由于微博频繁刷新，采用多级缓存策略。
  3.启用多个数据中心，用于就近访问，加快访问速度；数据冗余复制的灾备中心。
  
  
三.大型网站核心架构要素
  架构：最高层次的规划，难以改变的决定。这些规划和决定奠定了事物未来发展的方向和最终的蓝图。
  软件架构：有关软件整体结构与组件的抽象描述，用于指导大型软件系统各个方面的设计。
  软件架构需要关注和平衡的要素：功能需求、性能、可用性、伸缩性、扩展性和安全性。
  1.性能：影响用户请求的所有环节都可以进行性能优化。
    衡量标准：1.TPS(吞吐量/每秒事物数)
              2.并发数：系统能够同时处理请求的数目，即同时提交请求的数目。系统用户数>>在线用户数>>并发用户数。
              3.响应时间：应用执行一个操作需要的时间，包括从发出请求到收到最后相应数据的时间。
              4.系统性能计数器：描述服务器或操作系统性能的一些数据指标。system load  对象与线程数  内存使用  CPU使用  磁盘与网络IO
  2.可用性：
    衡量标准：假设系统中任何一台或多台服务器宕机时，以及出现各种不可预期的问题时，系统整体是否依然可用。
  3.伸缩性：通过不断向集群中加入服务器的手段来缓解不断上升的用户并发访问压力和不断增长的数据存储要求。
    集群种类：应用服务器、缓存、数据库、NoSql
    衡量标准：1.是否可用多台服务器构建集群。
              2.是否容易向集群中添加新的服务器。
              3.加入新的服务器后是否可以提供和原来无差别的服务。
              4.集群中可容纳的总的服务器数量是否有限制。
  4.扩展性：关注网站的业务功能需求。
    主要手段：1.事件驱动架构：通过消息队列，将消息产生者和消息处理分离开来，可以透明的增加新的消息生产者任务或新的消息消费者任务。
              2.分布式服务：将业务和可复用的服务分离，通过分布式服务框架调用。
              3.通过提供开发平台接口，吸引第三方开发者调用网站服务，扩展网站应用。
    衡量标准：1.在网站增加新的业务产品时，能否实现对现有产品透明无影响。
              2.不需要或很少的改动既有业务功能就可以上线新产品。
              3.产品之间耦合度低，一个产品改动对其他产品无影响。
  5.安全性：保护网站不受恶意访问和攻击，保护网站的重要数据不被窃取。
    衡量标准：针对现存的和潜在的各种攻击和窃密手段，是否有可靠的应对策略。
    
四.瞬时响应：网站的高性能架构
  4.1 网站性能测试
    性能视角：用户、开发人员、运维人员。
    性能测试方法：性能测试、负载测试、压力测试、稳定性测试。
    性能优化策略：
      1.性能分析：检查请求处理各个环节的日志，分析那个环节响应时间不合理；检查监控数据，分析影响性能的因素，内存、CPU、磁盘、网络；确定是代码问题还是架构不合理，或系统资源不足。
      2.性能优化：定位问题原因后，从以下3个方面优化：WEB前端优化、应用服务器优化、存储服务器优化
  4.2 Web前端性能优化
    1.浏览器访问优化：
      1.减少http请求：每次http请求都需要建立通讯链路、数据传输，而在服务端，每个http都需要启动独立线程，这些通讯和服务开销昂贵。
        手段：将浏览器一次访问的JS、CSS合并成一个文件；图片也可以合并，如果每个图片的URL不同，可通过CSS偏移响应鼠标点击操作，构造不同URL.
      2.使用浏览器缓存：通过设置HTTP头中的Cache-control和Expirse的属性，缓存时间可以是数天，甚至几个月。
        如果静态资源要及时生效，通过改文件名实现。
      3.启用压缩：服务器端压缩，浏览器端解压，可减少传输数据量，但是会产生一定的压力。采用GZip效果较好。
      4.CSS放在页面最上面，JS放在页面最下面。但如果页面解析就需要使用JS，则不能放在底部。
      5.减少Cookie传输：Cookie包含在每次请求和响应中，太大的Cookie会影响数据传输；对静态资源访问，发送Cookie没有意义，考虑使用独立域名。
    2.CDN加速：网络访问第一跳。一般缓存静态资源，如图片、文件、CSS、JS、静态网页等。    3.反向代理：传统代理服务器位于浏览器一侧，代理浏览器将HTTP请求发送到互联网上，而反向代理服务器位于网站机房一侧，代理网站Web服务器接收HTTP请求。
      1.反向代理服务器具有保护网站安全的作用，相当于在Web服务器和可能的网络攻击之间建立一个屏障。
      2.缓存(静态或部分动态数据，如动态内容有变化，通过内部通知机制通知反向代理缓存失效，反向代理会重新加载新的内容再次缓存)
      3.负载均衡。
  4.3 应用服务器优化
    1.分布式缓存：网站性能优化第一定律：优先考虑使用缓存。
      1.缓存原理：访问速度快；已经过计算，可直接使用。
        应用程序读取数据时，先读取缓存，如没有或已失效，在访问数据库，并将数据写入缓存。
      2.不适合使用缓存：频繁修改的数据  没有热点的访问  数据不一致与脏读  缓存可用性  缓存预热  缓存穿透
      3.分布式缓存架构：JBossCache  Mebcached
        1.JBoss Cache：本机部署，缓存服务器之间需要更新同步，适用于企业
          优点：1.在所有服务器中保存相同的缓存数据
                2.当某台服务器中缓存数据有更新，通知集群中其他机器更新
                3.通常将应用程序和缓存部署在同一台服务器中，实现本地快速获取缓存
          缺点：1.缓存数量受限单一服务器内存
                2.缓存更新信息需要同步到集群所有服务器，其代价惊人              
      4.Mebcached：集中式，缓存服务器之间不互相通讯。
        实现算法：缓存的本质是一个内存Hash表。数据缓存以一对Key和Value的形式存储在内存Hash表中。计算KV中Key的Hashcode(int)对应的Hash表索引，可快速访问Hash表中的数据。该Hashcode是对象的唯一标示符，Hashcode%Hash表数组长度=Hash表索引。使用该索引直接访问得到Hash表中的KV对。应用程序通过一致性Hash等路由算法选择缓存服务器远程访问缓存数据，缓存服务器之间不通讯，容易扩容。
        1.简单的通讯协议：通讯协议(TCP  UDB  HTTP)；序列化协议(XML  JSON  自定义)
        2.丰富的客户端程序：由于通讯协议简单，所以支持所有网站主流编程语言，特别适合混合使用多种编程语言的网站
        3.高性能的网络通信：
    2.异步操作(消息队列)：任何可以晚点再做的事情都应该晚点再做
      优点：使用消息队列将调用异步化，改善网站扩展性，用户请求发送到消息队列后立即返回；改善网站性能(高并发时削峰)，
      缺点：返回成功后，消息队列在后续的业务校验和写库可能失败，所以用户提交后，不能立即返回成功，等队列消费者处理完后，在以合适方式返回
    3.使用集群：使用负载均衡为一个应用构建一个由多台服务器组成的集群。
    4.代码优化：
      1.多线程：使用多线程原因：IO阻塞与多CPU。理想系统Load是既没有进程(线程)等待也没有CPU空闲。
        启动线程数=[任务执行时间/(任务执行时间-IO等待时间)]*CPU内核数
          CPU计算型任务：线程数最大不超过CPU内核数，多了CPU也来不及调度
          需要等待磁盘操作或网络响应：多启用线程有助于提高任务并发度，提高吞吐能力，改善系统性能
        解决线程安全方法：将对象设计为无状态对象  使用局部对象  并发访问资源是使用锁
      2.资源复用：单例和对象池
      3.数据结构：程序=数据结构+算法
      4.垃圾回收：JVM内存分为：堆(heap)存储线程上下文，如方法参数、局部变量等  堆栈(stack)存储对象的内存空间，对象的创建和释放、垃圾回收
        根据业务特点和对象生命周期，合理设置Young Generation和Old Generation大小，尽量减少Full GC。事实上，Web应用在整个运行周期从不进行Full GC。
    
        
        
        
        
热备份针对归档模式的数据库,在数据库仍旧处于工作状态时进行备份.而冷备份指在数据库关闭后,进行备份,适用于所有模式的数据库.热备份的优点在于当备份时,数据库仍旧可以被使用并且可以将数据库恢复到任意一个时间点.冷备份的优点在于它的备份与恢复操作相当简单,并且由于冷备份的数据库可以工作在非归档模式下,数据库性能会比归档模式稍好
热备份就是二台同时工作，坏了一台也不要紧，冷备份是用一台，坏了要手动切换。    