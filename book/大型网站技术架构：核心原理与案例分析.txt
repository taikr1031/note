一.大型网站架构演化
  大数据高并发架构技术点：
    CDN镜像
    负载均衡
    静态化
    静态内容（图片）与动态内容服务器分离
    缓存（本地缓存、集中（集群）缓存）
    数据队列
    数据库集群，读写分离
    库表水平及垂直拆分
    NoSql分布式数据引擎及MapReduce
    虚拟化云计算体系

  大型网站软件系统特点：
    高并发，大流量   高可用   海量数据  用户分布广泛，网络情况复杂   安全环境恶劣  需求快速变更，发布频繁   渐进式发展

  山寨和创新的最大区别不在于是否抄袭，是否模仿，而在于对问题和需求是否真正理解和把握。
  
  大数据计算需求实现方式：
    1.大数据变成小数据->抽样
    2.分布式集群化:将机器学习算法在hadoop分布式集群上并行化，如mahout
    3.降低问题精度
  12306真正的问题不在于他的技术架构，而是业务架构。售票方式从之前的零点开售若干天的票（类似促销秒杀），改为引入排队机制、整点售票改为分时段售票。其实如果能控制住并发访问的量，很多棘手的技术问题就不是问题了。
  技术是用来解决业务问题的，而业务的问题，也可以通过业务手段解决。

二.大型网站架构模式
2.1 网站架构模式
  1.分层：将系统在横向维度切分成几个职责相对单一的部分，通过上层对下层的依赖和调用组成一个完整的系统。如应用层、服务层、数据层。
  2.分割：将系统在纵向维度切分。即将大的业务功能分割成不同的应用，由不同的团队负责。该分割可在多个横向分层里进行。
  3.分布式：大型网站的分层和分割的一个主要目的是为了切分后的模块便于分布式部署，即将不同模块部署在不同服务器上，通过远程调用协同工作。
    优点：可以使用更多的计算机完成同样的功能。
    缺点：多台机器间的服务调用必须依靠网络，对性能会造成影响；分布式中的保持数据一致性和事务较难；网站部署复杂，不易维护。
    分布式方案：
      1.分布式应用和服务：改善性能和并发性、加快开发和发布速度、减少数据库连接消耗。应用可复用。
      2.分布式静态资源：动静分离；静态资源包独立部署减轻应用服务器压力；单独域名，加快浏览速度；利于分工合作。
      3.分布式数据和存储：分布式关系数据库；NoSql都是分布式
      4.分布式计算：应用、服务、实时数据处理都是计算；hadoop mapreduce；移动计算，不移动数据，将计算程序分发到数据所在位置加速计算
      5.分布式配置：支持网站线上服务器配置实时更新
      6.分布式锁：实现并发和协同
      7.分布式文件：支持云存储
  4.集群：多台服务器部署相同的应用构成一个集群，通过负载均衡设备共同对外提供服务。
    优点：提高并发性；提高可用性，如某台服务器故障，可通过失效转移机制转发到其他服务器，不影响用户使用
  5.缓存
    1.CDN：内容分发网络。部署在距离终端用户最近的网络服务商，使用户通过最短访问路径获取数据
    2.反向代理：部署在网站前端。当用户发送请求，最先到的就是反向代理服务器，它缓存静态资源，无需将请求转发到应用服务器就能直接返回用户
    3.本地缓存：在服务器本地缓存热点数据，应用程序直接访问内存，无需访问数据库
    4.分布式缓存：使用前提：1.数据访问热点不均衡；2.数据不会很快过期
    5.异步：生产者消费者模式
      优点：提高系统可用性；加快网站访问速度；消除并发访问高峰；提供系统灵活性，只要数据结构不变，彼此功能实现可随意变化而不互相影响
            降低软件耦合性，业务之间消息传递不是同步，而是将一个业务操作分成多个阶段，每个阶段之间通过共享数据的方式异步执行协作。
      使用场景：异步处理，应用解耦，流量削锋和消息通讯。
      实现方式：单一服务器内通过多线程共享内存队列的方式实现异步；分布式系统多个服务器集群通过分布式消息队列实现异步（mq、kafka）。
  6.冗余：服务器冗余运行、数据冗余备份；数据库除了定期备份、存档保存、实现冷备份外，为了保证在线业务高可用，主从分离，实时同步实现热备份
  7.自动化：无人值守
      程序发布：自动化代码管理、自动化测试、自动化安全检测、自动化部署。
      日常运维：自动化监控、自动化报警、自动化失效转移、自动化失效恢复、自动化降级、自动化资源分配。
  8.安全：密码、手机验证码、加密、网站验证码、敏感信息过滤、攻击网站XSS攻击、SQL注入、风险控制
      
2.2 架构模式在新浪微博的应用
  1.新浪微博采用异步推拉结合模式，用户发表微博后系统将微博写入消息队列后立即返回，用户响应迅速，消息队列消费者任务将微博推送给所有当前在线粉丝的订阅列表中，非在线用户登录后再根据关注列表拉取微博订阅列表。
  2.由于微博频繁刷新，采用多级缓存策略。
  3.启用多个数据中心，用于就近访问，加快访问速度；数据冗余复制的灾备中心。
  
  
三.大型网站核心架构要素
  架构：最高层次的规划，难以改变的决定。这些规划和决定奠定了事物未来发展的方向和最终的蓝图。
  软件架构：有关软件整体结构与组件的抽象描述，用于指导大型软件系统各个方面的设计。
  软件架构需要关注和平衡的要素：功能需求、性能、可用性、伸缩性、扩展性和安全性。
  1.性能：影响用户请求的所有环节都可以进行性能优化。
    衡量标准：TPS、响应时间、系统性能计数器。
  2.可用性：
    衡量标准：假设系统中任何一台或多台服务器宕机时，以及出现各种不可预期的问题时，系统整体是否依然可用。
  3.伸缩性：通过不断向集群中加入服务器的手段来缓解不断上升的用户并发访问压力和不断增长的数据存储要求。
    集群种类：应用服务器、缓存、数据库、NoSql
    衡量标准：1.是否可用多台服务器构建集群。
              2.是否容易向集群中添加新的服务器。
              3.加入新的服务器后是否可以提供和原来无差别的服务。
              4.集群中可容纳的总的服务器数量是否有限制。
  4.扩展性：关注网站的业务功能需求。
    主要手段：1.事件驱动架构：通过消息队列，将消息产生者和消息处理分离开来，可以透明的增加新的消息生产者任务或新的消息消费者任务。
              2.分布式服务：将业务和可复用的服务分离，通过分布式服务框架调用。
              3.通过提供开发平台接口，吸引第三方开发者调用网站服务，扩展网站应用。
    衡量标准：1.在网站增加新的业务产品时，能否实现对现有产品透明无影响。
              2.不需要或很少的改动既有业务功能就可以上线新产品。
              3.产品之间耦合度低，一个产品改动对其他产品无影响。
  5.安全性：保护网站不受恶意访问和攻击，保护网站的重要数据不被窃取。
    衡量标准：针对现存的和潜在的各种攻击和窃密手段，是否有可靠的应对策略。
    
四.瞬时响应：网站的高性能架构
  4.1 网站性能测试
    性能视角：用户、开发人员、运维人员。
    