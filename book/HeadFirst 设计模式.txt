设计原则：
	封装变化，把会变化的部分独立出来，不要和不需要变化的的代码混在一起，好让其他部分不会受到影响。
	针对接口编程，不针对实现编程。
	多用组合，少用继承。
	为交互对象之间的松耦合设计而努力。
	开闭原则：类应该对扩展开放，对修改关闭。
	依赖倒置：要依赖抽象，不要依赖具体类。
	迪米特法则：最少知识：只和你的密友谈话。不要让太多的类耦合在一起。
	好莱坞原则：别调用我们，我们会调用你。防止“依赖腐败”，只能高层组件调用底层组件，底层不能调用高层。
	单一责任：高内聚，低耦合。一个类应该只有一个引起变化的原因。


设计模式：在某情景下，针对某问题的某种解决方案。
	策略（鸭子的飞和叫）：定义了算法簇，分别封装起来，让他们之间可以互相替换，此模式让算法的变化独立于使用算法的客户。
	观察者（气象站的3个布告板）：定义了对象之间的一对多依赖，这样一来，当一个对象改变状态时，它的所有依赖者都会收到通知并自动更新。
	装饰者（咖啡的饮料加调料）：不改变接口，但加入责任。动态的将责任附加到对象上，若要扩展功能，装饰者提供了比继承更有弹性的替代方案。
	工厂方法（制作不同的比萨）：定义一个创建对象的接口，但由子类决定要实例化的类是哪一个。工厂方法让类把实例化推迟到子类。
	抽象工厂：提供一个接口，用于创建相关或依赖对象的家族，而不需要明确指名具体类。
	单例（巧克力工厂）：确保一个类只有一个实例，并提供一个全局访问点。
	命令（遥控器多个按钮组、餐厅订单流转）：将“请求”封装成对象，以便使用不同的请求、队列或日志来参数化其他对象。命令模式也可以支持撤销的操作。
	适配器（火鸡转换成鸭子）：将一个或多个接口转换成另一个接口。将一个类的接口，转换城客户期望的另一个接口。适配器让原本接口不兼容的类可以合作无间。
	外观（家庭影院）：让接口更简单。提供一个统一的接口，用来访问子系统中的一群接口，让子系统更容易使用。
	模板方法（冲泡咖啡和茶）：在一个方法中定义一个算法的骨架，而将一些步骤延迟到子类中。模板方法可以使得子类可以在不改变算法结构的情况下，重新定义算法中的某些步骤。当子类必须实现算法的某个方法时，采用抽象方法；当子类对算法中某个方法是可选的，采用钩子（声明在抽象类中的方法，但只有空的实现或默认的实现），子类是否挂钩，子类自行决定。
	迭代器（ArrayList的菜单和Array的菜单合并）：提供一种方法顺序访问一个聚合对象中的各个元素，而又不暴露其内部的表示。
	组合（树）：允许你将对象组合成树形结构来表现“整体/部分”层次结构。组合能让客户以一致的方式处理个别对象以及对象组合。
	状态（糖果机）：允许对象在内部状态改变时改变他们的行为，对象看起来好像修改了它的类。
	代理：
		远程代理（远程监控糖果机 RMI）：为另一个对象提供一个替身或占位符以控制对这个对象的访问。
		虚拟代理（显示CD封面）：作为创建开销大的对象的代表。虚拟代理经常直到我们真正需要一个对象的时候才创建他。当对象在创建前和创建中时，由虚拟代理来扮演对象的替身。对象创建后，代理就会将请求直接委托给对象。
		保护代理：根据访问权限决定客户可否访问对象的代理。
		缓存代理：为开销大的运算结果提供暂时存储；他也允许多个客户共享结果，以减少计算或网络延迟。
		同步代理：在多线程的情况下为主题提供安全的访问。
		防火墙代理：控制网络资源的访问，保护主题免于“坏客户”的侵害。
		写入时复制代理：用来控制对象的复制，方法是延迟对象的复制，直到客户真的需要为止。这是虚拟代理的变体。
		复杂隐藏代理：用来隐藏一个类的复杂集合的复杂度，并进行访问控制。也称为外观代理。
	复合：结合两个或两个以上的模式，组成一个解决方案，解决一再发生的一般性问题。

	桥接（Bridge Pattern）：使用桥接模式 不只改变你的实现，也改变你的抽象。
	生成器（Builder Pattern）：封装一个产品的构造过程，并允许按步骤构造。
	责任链（Chain of Responsibility Pattern）：当你想要一个以上的对象有机会能够处理某个请求的时候，就使用责任链模式。
	蝇量（Flyweight Pattern）：如想让某个类的一个实例能用来提供许多“虚拟实例”，就使用蝇量模式。
	解释器：（Interpreter Pattern）：为语言创建解释器。
	中介者（Mediator Pattern）：集中相关对象之间复杂的沟通和控制方式。
	备忘录（MementtoPattern）：当你需要让对象返回之前的状态时（例如，你的用户请求“撤销”），就使用备忘录模式。
	原型（Prototype Pattern）：当创建给定类的实例的过程很昂贵或很复杂时，使用原型模式。
	访问者（Visitor Pattern）：当你想要为一个对象的组合增加新的能力，且封装并不重要时，使用访问者模式。


反模式：
	定义：告诉你如何采用一个不好的解决方案解决一个问题。
	产生的根源：匆忙、漠然、思想狭隘、懒惰、贪婪、无知、自负。
	胖球（The Blob）：过程式风格的设计导致一个对象承担大量的职责，而大部分其他对象===则只用于保存数据或执行简单的处理。解决方案包括重构设计来更均匀的分布职责以及隔离变化大的影响。
	

