分布式系统规划：
1、Redis加速：用Redis缓存来给WordPress站点加速-适用于Apache和Nginx
2、负载均衡：免费空间+便宜VPS和OpenResty,Ngx_lua,Redis搭建系统负载均衡环境
3、CDN加速：DNSPOD分布式解析+安全宝和Incapsula对搜索引擎分别CDN加速

分布式系统要去session化，即不能用session，因为session都在web服务器的内存中，如换了服务器就无法获取了。
mybaits适合于复杂SQL，方便DBA根据业务SQL调优。
springmvc中的get传参优先使用restful风格。
	@RequestMapping(value="toUpdate/{customerUuid}", method=RequestMethod=GET)
	public String toUpdate(Model model, @PathVariable("customerUuid") int customerUuid){
		...
	}

几种访问模式：()：存放内容；[]：作用
1.纯静态：
	Client->Nginx(本地静态资源文件)[动静分离]
2.纯动态，不能缓存：
	Client->Nginx(本地静态资源文件)[动静分离]->Tomcat(动态请求)->MySql
3.部分动态，能缓存： 
	Client->Nginx(本地静态资源文件)[动静分离/负载均衡]->Varnish(内存静态/动态资源)[缓存]->Tomcat(动态请求)->MySql


/********************************** Ngnix [31-40] ********************************** /
用途：1.反向代理、负载均衡、动静分离
			2.分布式部署、应用的垂直/水平切分、为应用系统向大规模架构变迁做好准备
			3.虽然动静分离也能多少提高一点性能，但Ngnix的主要关注点不是为了提高性能，而是是的系统的分布式，大规模部署成为可能
			4.在小系统上部署Nginx可能还会变慢，毕竟多了一层代理
1.轻量级Web服务器，也是一款轻量级的反向代理服务器。
2.作用: 直接支持Rails和PHP程序、负载均衡、邮件代理服务器、前端动静分离、...
3.特点: 高稳定、高性能、资源占用少、功能丰富、模块化结构、支持热部署
location: 一个类型请求只配置一个类型pattern请求处理。按文件后缀名分；按模块分
缓存一般都是针对get，post是客户端向服务端提交数据，不必缓存

静态服务器，apache和nginx优缺点：
nginx静态资源修改后如何保证后端和前端程序一直：
	1.Rsync做服务端自动同步或使用NFS、MFS分布式共享存储
	2.静态资源单独打包，发布到Nginx，动态程序发布到Tomcat
	
负载均衡：
	1.多个tomcat集群要做session复制，ip_hash（不推荐） 客户端的IP有可能变化
	2.轮训（设置权重）、geo、geoip
rewrite：
	用来执行URL重定向，利于去掉恶意访问的URL，有利于搜索引擎SEO
	Nginx使用的语法源于Perl兼容正则表达式
	
缓存动态内容（动态内容静态化）

Apache ab压力测试：/apache/bin/ab -n1000 -c10 http://localhost:8080/index.jsp

/********************************** Varnish [41-50] ********************************** /

用途：1.HTTP加速器（基于内存或虚拟内存缓存），对静态或部分动态资源的缓存以提高性能
			2.反向代理、负载均衡：Nginx优于Varnish
			3.如果访问量持续增大，
缓存数据迁移，如原来的Varnisi机器宕机，可以使用命令把缓存数据恢复回来
共享内存日志
浏览器先访问Varnish，然后再访问Tomcat
Varnish和Memcached都属于内存级别的缓存加速，Varnish即使服务器重启也会原有的缓存也不丢失（从日志恢复），因此适合页面缓存，而Memcached更适合MysqL数据库缓存，可以大大减少数据库压力。
通过日志分析那些需要缓存，提高命中率
子进程是Varnish真正产生奇迹的地方，他包含一系列线程来执行不同的任务
优化：1.规划缓存大小。如门户首页包括：首页本身文字图片内容；另外是首页链接（1层或2层）的页面或图片等。命中率也很高
			2.产生一个对象的花费多大？如从后端返回不太消耗资源，而你的内存有有限，则只缓存部分最热门的图片，而不是所有图片
			3.使用varnishstat或其他工具监控n_lru_nuked计数器。如有很多LRU活动，是因为空间限制在清除对象，要考虑增加缓存大小
			4.缓存小文件要考虑额外开销，varnish中每个对象的额外花销大概是1K
			5.如一台机器只供Varnish使用，分配缓存大小只分配机器物理内存的50%~70%。
			6.提高命中率方法：1.规划请求和应答，自定义缓存策略。通过VCL写代码来配置想要缓存的内容，并主动设置TTL，
												2.不依赖http header（对代码侵入太大，尽量在Varnish内部解决）
												3.如使用默认策略，就跟踪和分析Http header
												4.在合理范围内，加大TTL
												5.分析日志，哪些该命中没有命中

/********************************** Nginx + Varnish [51-60] ********************************** /
优化：1.缓存的同时尽量节省内存
			2.提高命中率，该缓存的是否缓存（看日志该对象miss/hist）
哪些内容放进Varnish？
	1.静态资源
	2.动态资源
		1.如首页页面，缓存时间缩短，如几分钟更新
		2.如页面中含有动态信息，则先缓存页面，页面展示后，在通过ajax更新页面中的实时数据
		3.含有post提交数据的页面不能缓存，如提交登录或提交订单
		4.客户频繁修改的页面不能缓存，如购物车
缓存到底是放在Ngnix还是Varnish：
	取决于Ngnix读取本地读取文件时间和Varnish读取后台/缓存加网络传输（Varnish将数据传输到Nginx）哪个时间更短
	
/********************************** Memcache [51-60] ********************************** /
Memcache是一个开源的、高性能的、分布式的内存对象缓存系统
用途：1.在内存中缓存数据，减轻数据库压力
特点：1.内存中键值对，性能好
			2.协议简单（基于问本行），功能强大
			3.基于libevent时间处理，无阻塞通讯，对内存读写快
			4.基于客户端的分布式，服务端多个Memcache之间不互相通讯