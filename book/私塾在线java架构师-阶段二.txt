一.分布式架构和部署
	Client=>Varnish=>MoligeFS=>Tomcat=>MySql
二.高并发和Web层的性能优化

三.逻辑层处理和性能优化

四.数据层处理和性能优化

五.数据库优化

数据库分区、分库、分表需要采用DAL进行屏蔽和管理（如非十分必要，不要分库分表，特别是分表，需要自已做表数据的拆分和合并）
NoSQL：判断依据：是否有强事务需要



分布式架构演变：
1.Nginx：		可集群。一个Nginx又可以分发到多个Varnish
2.Varnish：	可集群。将Varnish和后面所有的部分看成一个块，可复制多份，通过前面的Nginx分发，对应多个块
3.MogileFS：可集群。一个Nginx可以对应多个Track，而一个Track又对应多个DataNode
4.Tomcat：	可集群。
5.ActiveMQ：可集群。终极解决方案。如后台处理太慢，撑不住，可异步处理，将不需要实时响应的放到ActiveMQ中
6.MemCache：可集群。部分数据的缓存，提高程序运行速度，提高并发性。
7.MongoDB：	可集群。无事务要求、写少读多。支持数据的复制、分片、水平扩展
8.MySql：		可集群。支持主从分离，读写分离；将数据量大，写少读多的部分数据放入MongoDB 
9.应用拆分：对应用进行拆分部署，比如分层拆分，甚至功能级拆分（不推荐）
10.F5、LVS:	在Nginx前面加F5（硬件，昂贵）或者LVN，将Nginx和后面的复制多份，建立大的负载均衡集群
11.CDN:			CDN供应商会分担很多只读请求，只有类似写请求需要访问后端服务
12.HA：			双机热备。对重要节点进行做HA，如Nginx

统一会话管理：shiro：通过MemCache实现多服务器的会话统一管理，只要是同一个客户端(jSessionID相同)访问多个服务器(jetty、tomcat)可以只登陆一次

统一会话管理问题：
1.如果用户关闭了Cookie：提示用户打开；采用URL重写(数据较多，安全性问题导致效果不理想)
2.Cookie数据的安全性：存放在客户端，可能被篡改，安全系数低
3.跨域访问Cookie：Cookie不能跨域
	1.ABC3个域没有主域：客户进A站点，同时在BC域广播MyID
	2.A为主域，BC以A为主：客户进B站点，B站点向A发起异步请求，获取A的登录信息MyID
4.公共缓存的规划、集群和数据维护：保存登录信息的MemCache非常重要，可能会存放不下
	
#、单点登录：推荐shiro
去掉认证服务器，当客户访问A模块，Request中的Cookie中带着MyID，A模块前置的Filter来访问公共Session区域(MemCache)。如有该MyID存在并且没有过期，则表示已登录。
优点：支持异构系统(只要能读写Cookie，能访问MemCache)，也可以不用shiro，自己开发
	
#、一致性更新
数据复制优点：
	1.一份数据复制多份，避免单点失效
	2.形成主数据和数据集的副本，可以根据地理位置或业务场景优化，提高性能。如北京的访问北京的库，上海的访问上海的库
	
常见解决方案：
1.一个公共数据库
	1.单点部署(每秒100个并发，适合中小型系统)：为库存修改全部都访问一个库，单库处理。修改库存方法需要串行化
	2.采用版本控制：每次写库存时，比较自已之前读取的库存版本是否最新。Hibernate乐观锁机制
2.分散多个数据库
	1.可以把问题简化成为只有一个数据库的情况
	2.采用预分配数据，动态进行逻辑调整：设立库存调度中心，为每个分库都设置安全库存。
		如分库库存大于安全库存，则修改时不用通知其他库，如低于则通知调度中心。
		调度中心收到后，会统计所有分库的当前库存和自身保留库存，统筹分析，是否需要调度。
		如北京库低于安全库存了，但上海库存积压，可以考虑把上海库的分一部分到北京库。
		调度完成后，调用中心将调整后的库存通知各地库存管理应用去更新自已分库库存
		调用中心直接修改分库库存可能存在数据同步，版本管理问题
		不要采用两个库同步修改总库存模式，因为会存在时间差，如北京将总库存改成了50，实时同步到上海过程中，上海也修改了总库存，造成2个库不一致
	
#、分布式事务
事务协调管理器：先写事务日志，在写数据库。如果中间发生异常，事务协调管理器根据事务日志回滚所有服务器事务
事务两阶段提交：询问阶段、正式提交
分布式事务除了复杂外，还极度影响性能，尽量避免，无无法避免，采用代价最小方式，一个应用对应多个数据库

#、高并发
请求的无限和服务端资源的有限之间的矛盾就是高并发

高并发处理的基本思路：
1.客户端方面(不仅是浏览器，而是广义的所有类型的请求发起方)：
	1.客户端数据缓存
	2.尽量在客户端通过js排序
	3.频繁的短连接改为长连接
2.服务端方面(请求接收方)：
	1.分而治之(请求分流)，提高单个请求的处理速度
	
高并发处理的基本手段-1：
1.客户端发起请求层面：合理设置过期时间