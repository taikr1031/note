--概念设计（软件架构设计）：
<>技术架构只是软件架构的一个方面，而不是软件架构的全部
<>根据软件架构的实际场景需要，通常在软件系统架构中采用如下几个视图：
	功能视图、开发视图、进程视图、部署视图、场景视图、数据视图、实现视图

--详细设计
<>软件详细设计则是针对应用系统架构的各个层(Tie)进行进一步的设计，对系统通用服务、业务通用服务进行抽象，并设计数据层、业务逻辑层、用户层的详细成员以及各个成员之间的关系。
<>软件设计通常采用用例(Use Case)或者结合具体的场景(Scenario)进行分析设计（用例驱动），完成用户界面设计、应用逻辑和领域对象设计、数据模型和存储设计、类设计、通用机制设计等。

--什么是优秀的软件设计
软件系统需求本身包括功能性需求和非功能性需求，一个优秀的软件设计除了满足系统的功能性需求外，更应该关注系统的非功能需求。非功能需求一般包括：系统的可维护性、可扩展性、功能的复用性、良好的性能、安全性、易用性等。
优秀的软件设计应该具备如下的性质：
	可扩展性(Extendibility)\灵活性(Flexibility)\可插入性(Pluggability)

--面向对象设计的原则:
	单一职责原则、开闭原则、DRY原则、里氏替换原则、依赖关系倒置原则、接口隔离原则



VM在大内存服务器上怎么充分利用硬件资源：单机多集群
